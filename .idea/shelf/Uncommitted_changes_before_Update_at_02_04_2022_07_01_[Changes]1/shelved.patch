Index: ETL-MongoDB.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#########################################################\r\n# Alessandro Miranda Gonçalves                          #\r\n# Linkedin: www.linkedin.com/alessandromirandagoncalves #\r\n# Março/2022                                            #\r\n#########################################################\r\n# Programa irá fazer ETL do arquivo ocorrencia.csv e aeronave.csv que possuem as ocorrências de\r\n# incidentes e acidentes, tabela de aeronaves e aeródromos envolvidos nas ocorrencias\r\n# investigadas pelo CENIPA e podem ser obtidos no endereço\r\n# https://dados.gov.br/dataset/ocorrencias-aeronauticas-da-aviacao-civil-brasileira\r\n# e irá gerar um banco de dados MongoDB na nuvem com os resultados.\r\n# O processo foi construído testando as funções no Jupyter Notebook e após funcionar\r\n# criado esse projeto em Python no Pycharm. Desta forma,ganha-se muito tempo para testar.\r\n# Obs: das tabelas originais alguns campos não utilizados foram removidos no CSV\r\n\r\nimport pandas as pd         # Biblioteca com funções de ETL\r\nimport pandera as pa        # Biblioteca com funções de ETL\r\nimport sys                  # Biblioteca com funções de sistema\r\nimport sqlalchemy as sql    # Permite manipulação de dados Mysql\r\nimport datetime             # para cálculos de tempo usado pelo programa\r\n\r\n\r\ndef imprimir_cabecalho():  # Exibe informações iniciais do programa\r\n    print(58*'-')\r\n    print('Programa ETL de arquivo ocorrências aeronáuticas no Brasil com exportação para MongoDB')\r\n    print(58*'-')\r\n\r\n\r\ndef conectar_banco():  # Conecta ao banco de dados e deixa aconexão aberta em \"conexao\"\r\n    try:\r\n        print('4. Conectando com Mysql')\r\n        # Credenciais para conexão Mysql\r\n        database_username = 'teste'\r\n        database_password = 'teste'\r\n        database_ip = '127.0.0.1'\r\n        database_name = 'mysql'\r\n\r\n        # Primeiramente se conecta ao Mysql para poder criar o banco CENIPA\r\n        conexao = sql.create_engine('mysql+mysqlconnector://{0}:{1}@{2}/{3}'.\r\n                                    format(database_username, database_password,\r\n                                    database_ip, database_name), pool_recycle=1, pool_timeout=57600).connect()\r\n        print('4.1 Conexão com Mysql com sucesso.')\r\n        criar_banco_mysql(conexao)\r\n        # Primeiramente se conecta ao Mysql para poder criar o banco CENIPA\r\n        database_name = 'cenipa'\r\n        conexao = sql.create_engine('mysql+mysqlconnector://{0}:{1}@{2}/{3}'.\r\n                                   format(database_username, database_password,\r\n                                          database_ip, database_name), pool_recycle=1, pool_timeout=57600).connect()\r\n        print('4.4 Conexão com CENIPA com sucesso')\r\n    except sql.exc.DatabaseError as e:\r\n        print('*** ERRO: Não foi possível conectar ao banco {} no servidor {} porta:3306.'.format(database_name,database_ip))\r\n        sys.exit(0)\r\n    return conexao\r\n\r\n# Executa a abertura do arquivo ocorrencia.csv e coloca NA e NAN nos valores não informados\r\n# a fim de facilitar a importação\r\ndef abrir_arquivo_ocor():\r\n    try:\r\n        print('1. Lendo arquivo ocorrencia...')\r\n        valores_ausentes=['**','***','****','*****','###!','####','NULL']\r\n        # Ao encontrar algo especificado em \"valores_ausentes\", estes serão automaticamente convertidos para Na ou Nan\r\n        df_ocor = pd.read_csv(\"ocorrencia.csv\",sep=';',parse_dates=[\"ocorrencia_dia\"],dayfirst=True,na_values=valores_ausentes)\r\n        print('1.1 Arquivo lido com sucesso')\r\n    #Testa se o arquivo existe\r\n    except FileNotFoundError as e:\r\n         print('*** ERRO: Arquivo ocorrencia.csv não encontrado. Favor verificar.')\r\n         sys.exit()\r\n    #Outros erros são exibidos\r\n    except BaseException as e:\r\n        print(\"*** ERRO: \".format(e))\r\n        sys.exit()\r\n    return df_ocor\r\n\r\n# Executa a abertura do arquivo aeronave.csv e coloca NA e NAN nos valores não informados\r\n# a fim de facilitar a importação\r\ndef abrir_arquivo_aviao():\r\n    try:\r\n        print('6. Lendo arquivo aeronave...')\r\n        valores_ausentes=['***','NULL']\r\n        # Ao encontrar algo especificado em \"valores_ausentes\", estes serão automaticamente convertidos para Na ou Nan\r\n        df_aviao = pd.read_csv(\"aeronave.csv\",sep=';',na_values=valores_ausentes)\r\n        print('6.1 Arquivo lido com sucesso')\r\n    #Testa se o arquivo existe\r\n    except FileNotFoundError as e:\r\n         print('*** ERRO: Arquivo aeronave.csv não encontrado. Favor verificar.')\r\n         sys.exit()\r\n    #Outros erros são exibidos\r\n    except BaseException as e:\r\n        print(\"*** ERRO: \".format(e))\r\n        sys.exit()\r\n    return df_aviao\r\n\r\n# Executa a abertura do arquivo fator_contribuinte.csv e coloca NA e NAN nos valores não informados\r\n# a fim de facilitar a importação\r\ndef abrir_arquivo_fator():\r\n    try:\r\n        print('9. Lendo arquivo fator_contribuinte...')\r\n        valores_ausentes=['***','NULL']\r\n        # Ao encontrar algo especificado em \"valores_ausentes\", estes serão automaticamente convertidos para Na ou Nan\r\n        df_fator = pd.read_csv(\"fator_contribuinte.csv\",sep=';',na_values=valores_ausentes)\r\n        print('9.1 Arquivo lido com sucesso')\r\n    #Testa se o arquivo existe\r\n    except FileNotFoundError as e:\r\n         print('*** ERRO: Arquivo fator_contribuinte.csv não encontrado. Favor verificar.')\r\n         sys.exit()\r\n    #Outros erros são exibidos\r\n    except BaseException as e:\r\n        print(\"*** ERRO: \".format(e))\r\n        sys.exit()\r\n    return df_fator\r\n\r\n# Verifica se o arquivo tem as colunas nos formatos corretos\r\n# Se não, mostra erro e encerra o programa\r\ndef validar_arquivo_ocor(df_ocor):\r\n    try:\r\n        print('2. Validando arquivo ocorrencia...')\r\n        schema = pa.DataFrameSchema(\r\n            columns={\"codigo_ocorrencia\": pa.Column(pa.Int,nullable=True),\r\n                     \"codigo_ocorrencia2\": pa.Column(pa.Int),\r\n                     \"ocorrencia_classificacao\": pa.Column(pa.String),\r\n                     \"ocorrencia_cidade\": pa.Column(pa.String),\r\n                     \"ocorrencia_uf\": pa.Column(pa.String, pa.Check.str_length(2, 2),nullable=True),\r\n                     \"ocorrencia_aerodromo\": pa.Column(pa.String, nullable=True),\r\n                     \"ocorrencia_dia\": pa.Column(pa.DateTime),\r\n                     \"ocorrencia_hora\": pa.Column(pa.String,\r\n                                                  pa.Check.str_matches(r'^([0-1][0-9]|[2][0-3])(:([0-5][0-9])){1,2}$'),\r\n                                                  nullable=True),\r\n                     \"total_recomendacoes\": pa.Column(pa.Int)\r\n                     }\r\n        )\r\n        schema.validate(df_ocor,lazy=True)\r\n        print('2.1 Arquivo validado com sucesso')\r\n    except pa.errors.SchemaErrors as e:\r\n        print('*** Erros encontrados na validação. Favor verificar:')\r\n        print(58 * '-')\r\n        print(e.failure_cases)    # erros de dataframe ou schema\r\n        print(e.data)             # dataframe inválido\r\n        print(58 * '-')\r\n        sys.exit()\r\n\r\n# Verifica se o arquivo tem as colunas nos formatos corretos\r\n# Se não, mostra erro e encerra o programa\r\ndef validar_arquivo_aviao(df_aviao):\r\n    try:\r\n        print('7. Validando arquivo aeronave...')\r\n        print('7.1 Excluindo registros duplicados...')\r\n        schema_aviao = pa.DataFrameSchema(\r\n            columns={\"codigo_ocorrencia2\": pa.Column(pa.Int),\r\n                     \"aeronave_matricula\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_operador_categoria\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_tipo_veiculo\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_fabricante\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_modelo\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_tipo_icao\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_motor_tipo\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_motor_quantidade\": pa.Column(pa.String, nullable=True),\r\n                     \"aeronave_pmd\": pa.Column(pa.Int),\r\n                     \"aeronave_fatalidades_total\": pa.Column(pa.Int)\r\n                     }\r\n        )\r\n        schema_aero.validate(df_aviao,lazy=True)\r\n        df_aviao.drop_duplicates(['codigo_ocorrencia2'],inplace=True)\r\n        print('7.3 Arquivo validado com sucesso')\r\n    except pa.errors.SchemaErrors as e:\r\n        print('*** Erros encontrados na validação. Favor verificar:')\r\n        print(58 * '-')\r\n        print(e.failure_cases)    # erros de dataframe ou schema\r\n        print(e.data)             # dataframe inválido\r\n        print(58 * '-')\r\n        sys.exit()\r\n\r\n# Verifica se o arquivo tem as colunas nos formatos corretos\r\n# Se não, mostra erro e encerra o programa\r\ndef validar_arquivo_fator(df_aviao):\r\n    try:\r\n        print('10. Validando arquivo fator contribuinte...')\r\n        print('10.1 Excluindo registros duplicados...')\r\n        schema_fator = pa.DataFrameSchema(\r\n            columns={\"codigo_ocorrencia3\": pa.Column(pa.Int),\r\n                     \"fator_nome\": pa.Column(pa.String),\r\n                     \"fator_aspecto\": pa.Column(pa.String),\r\n                     \"fator_condicionante\": pa.Column(pa.String),\r\n                     \"fator_area\": pa.Column(pa.String)\r\n                     }\r\n        )\r\n        schema_aero.validate(df_aviao,lazy=True)\r\n        df_aviao.drop_duplicates(['codigo_ocorrencia2'],inplace=True)\r\n        print('7.3 Arquivo validado com sucesso')\r\n    except pa.errors.SchemaErrors as e:\r\n        print('*** Erros encontrados na validação. Favor verificar:')\r\n        print(58 * '-')\r\n        print(e.failure_cases)    # erros de dataframe ou schema\r\n        print(e.data)             # dataframe inválido\r\n        print(58 * '-')\r\n        sys.exit()\r\n\r\ndef transformar_arquivo_ocor(df_ocor):\r\n    try:\r\n        #Cria uma nova coluna juntando data com hora e deixando no formato \"datetime\"\r\n        print('3. Transformando arquivo ocorrencia...')\r\n        df_ocor['ocorrencia_dia_hora'] = pd.to_datetime(df_ocor.ocorrencia_dia.astype(str) + ' ' + df_ocor.ocorrencia_hora)\r\n        print('3.1 Arquivo transformado com sucesso')\r\n\r\n    except pa.errors.SchemaErrors as e:\r\n        print('*** Erros encontrados na transformação. Favor verificar:')\r\n        print(58 * '-')\r\n        print(e.failure_cases)    # erros de dataframe ou schema\r\n        print(e.data)             # dataframe inválido\r\n        print(58 * '-')\r\n        sys.exit()\r\n\r\n#cria banco Mysql e exporta dados do dataframe para a tabela \"ocorrencias\"\r\ndef criar_banco_mysql(conexao):\r\n    try:\r\n        print('4.2 Criando banco Mysql...')\r\n        conexao.execute('create database CENIPA;')\r\n        print('4.3 Banco Mysql gerado.')\r\n    # Banco já existe. Despreza erro de criação\r\n    except sql.exc.DatabaseError as e:\r\n        print('>>> Aviso: Banco já existe. Continuando. <<<')\r\n    except ValueError as e:\r\n        print('***ERRO: '.format(e))\r\n        pass\r\n\r\n#exporta dados do dataframe para a tabela \"ocorrencias\"\r\ndef exportar_mysql_ocor(conexao,df_ocor):\r\n    try:\r\n        print('5 Gerando tabela ocorrencias...')\r\n        # Convert dataframe to sql table\r\n        df_ocor.to_sql('ocorrencias', conexao, index=False)\r\n    # Tabela já existe. Despreza erro de criação e continua.\r\n    except ValueError as e:\r\n        print('>>> Aviso: Tabela já existe. Continuando. <<<')\r\n\r\n    try:\r\n        print('5.1 Adicionando chave primária...')\r\n        conexao.execute('ALTER TABLE ocorrencias ADD PRIMARY KEY (`codigo_ocorrencia`);')\r\n    except sql.exc.ProgrammingError as e:\r\n        print('>>> Aviso: chave primária já existe. Continuando... <<<')\r\n\r\n    try:\r\n        print('5.2 Adicionando índice para chaves estrangeiras...')\r\n        conexao.execute('create index idx_codigo_ocorrencia2 on ocorrencias(codigo_ocorrencia2);')\r\n    except sql.exc.ProgrammingError as e:\r\n        print('>>> Aviso: índice já existe. Continuando... <<<')\r\n    print('5.3 Tabela ocorrencias gerada.')\r\n\r\n#Abre banco Mysql e exporta dados do dataframe para a tabela \"aeronaves\"\r\ndef exportar_mysql_aviao(conexao,df_aviao):\r\n    try:\r\n        # Converte dataframe para a tabela Mysql\r\n        print('8 Gerando tabela aeronaves...')\r\n        df_aviao.to_sql('aeronaves', conexao, index=False)\r\n\r\n    except ValueError as e:\r\n        print('>>> Aviso: Tabela já existe. Continuando. <<<')\r\n\r\n# SQL muito grande\r\n    except sql.exc.OperationalError as e:\r\n        print('ERRO: Got a packet bigger than `max_allowed_packet` bytes')\r\n        print('Execute as linhas abaixo no seu ambiente Mysql:')\r\n        print('   set global net_buffer_length=1000000;')\r\n        print('   set global max_allowed_packet=1000000000;')\r\n        sys.exit(0)\r\n\r\n    try:\r\n        print('8.1 Adicionando chave primária...')\r\n        conexao.execute('ALTER TABLE aeronaves ADD PRIMARY KEY (`codigo_ocorrencia2`);')\r\n    except sql.exc.ProgrammingError as e:\r\n        print('>>> Aviso: chave primária já existe. Continuando... <<<')\r\n\r\n    try:\r\n        print('8.2 Adicionando chave estrangeira...')\r\n        conexao.execute('ALTER TABLE ocorrencias ADD CONSTRAINT FK_OCORRENCIA_2 '\r\n                        'FOREIGN KEY (`codigo_ocorrencia2`) '\r\n                        'REFERENCES aeronaves(`codigo_ocorrencia2`);')\r\n    except sql.exc.DatabaseError as e:\r\n        print('>>> Aviso: chave estrangeira já existe. Continuando... <<<')\r\n\r\n    print('8.3 Banco Mysql alterado.')\r\n\r\nif __name__ == \"__main__\":\r\n    tempo_inicial = datetime.datetime.now()\r\n    imprimir_cabecalho()\r\n\r\n    # Fazer ETL com ocorrências primeiramente\r\n    df_ocor = abrir_arquivo_ocor()\r\n    validar_arquivo_ocor(df_ocor)\r\n    transformar_arquivo_ocor(df_ocor)\r\n    conexao = conectar_banco()\r\n    exportar_mysql_ocor(conexao,df_ocor)\r\n\r\n    # Fazer ETL com aeronaves\r\n    df_aero = abrir_arquivo_aero()\r\n    validar_arquivo_aero(df_aero)\r\n    ## Não existem transformações a serem feitas em aeronaves por isso passará à exportação\r\n    exportar_mysql_aero(conexao,df_aero)\r\n\r\n    # Fazer ETL com aeródromos\r\n    df_fator = abrir_arquivo_fator()\r\n    validar_arquivo_fator(df_fator)\r\n    ## Não existem transformações a serem feitas em fator contribuinte por isso passará à exportação\r\n    exportar_mysql_fator(conexao,df_fator)\r\n\r\n    tempo_final = datetime.datetime.now()\r\n    tempo_total = tempo_final-tempo_inicial\r\n    print(\"\\nTempo total transcorrido (em s): {}\".format(tempo_total))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ETL-MongoDB.py b/ETL-MongoDB.py
--- a/ETL-MongoDB.py	
+++ b/ETL-MongoDB.py	
@@ -295,7 +295,7 @@
     ## Não existem transformações a serem feitas em aeronaves por isso passará à exportação
     exportar_mysql_aero(conexao,df_aero)
 
-    # Fazer ETL com aeródromos
+    # Fazer ETL com fator con
     df_fator = abrir_arquivo_fator()
     validar_arquivo_fator(df_fator)
     ## Não existem transformações a serem feitas em fator contribuinte por isso passará à exportação
